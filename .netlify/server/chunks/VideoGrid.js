import { c as create_ssr_component, d as each, b as add_attribute, e as escape } from "./ssr.js";
import { d as db } from "./firebase.js";
import { getDocs, collection } from "firebase/firestore";
const css = {
  code: "@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;700&display=swap');.video-grid.svelte-1fwfsz4.svelte-1fwfsz4{display:grid;grid-template-columns:repeat(3, 1fr);gap:5px;justify-content:center;align-content:center;width:99vw;padding:0px;box-sizing:border-box}.video-item.svelte-1fwfsz4.svelte-1fwfsz4{position:relative;cursor:pointer;overflow:hidden;border:none;background:none;aspect-ratio:2.39 / 1;width:100%;transition:transform 0.5s ease}.thumbnail-wrapper.svelte-1fwfsz4.svelte-1fwfsz4{position:relative;width:100%;height:100%;display:flex;justify-content:center;align-items:center}.thumbnail.svelte-1fwfsz4.svelte-1fwfsz4{width:100%;height:auto;max-height:100%;-o-object-fit:cover;object-fit:cover;transition:opacity 0.3s ease;opacity:1}.logo.svelte-1fwfsz4.svelte-1fwfsz4{position:absolute;top:10px;left:10px;width:100px;height:auto;z-index:1;opacity:0;transition:opacity 0.5s ease}.small-logo.svelte-1fwfsz4.svelte-1fwfsz4{transform:scale(0.7);position:absolute;top:-0%;left:-0%;z-index:1;opacity:0;transition:opacity 0.5s ease, transform 0.5s ease}.overlay.svelte-1fwfsz4.svelte-1fwfsz4{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:white;text-align:center;display:none;width:100%}.video-item.svelte-1fwfsz4.svelte-1fwfsz4:hover{display:block;transform:scale(1.01)}.video-item.svelte-1fwfsz4:hover .overlay.svelte-1fwfsz4{display:block}.video-item.svelte-1fwfsz4:hover .logo.svelte-1fwfsz4{opacity:1}.video-item.svelte-1fwfsz4:hover .thumbnail.svelte-1fwfsz4{opacity:0.4;filter:blur(2px)}.description.svelte-1fwfsz4.svelte-1fwfsz4{white-space:pre-line;font-size:1rem;font-family:'Roboto Slab', serif;color:white;text-shadow:1px 1px 2px rgba(0, 0, 0, 0.5)}@media(max-width: 1200px){.video-grid.svelte-1fwfsz4.svelte-1fwfsz4{grid-template-columns:repeat(2, 1fr)}}@media(max-width: 800px){.video-grid.svelte-1fwfsz4.svelte-1fwfsz4{grid-template-columns:1fr}}",
  map: `{"version":3,"file":"VideoGrid.svelte","sources":["VideoGrid.svelte"],"sourcesContent":["<script lang=\\"ts\\">import VideoViewer from \\"./VideoViewer.svelte\\";\\nimport { db } from \\"./firebase\\";\\nimport { collection, getDocs, doc, setDoc, increment, arrayUnion } from \\"firebase/firestore\\";\\nlet videos = [];\\nlet selectedVideo = null;\\nconst logoMap = {\\n  Da: \\"/image/Da.webp\\",\\n  Yoann: \\"/image/logo.webp\\"\\n};\\nconst fetchVideos = async () => {\\n  try {\\n    const querySnapshot = await getDocs(collection(db, \\"videos\\"));\\n    videos = querySnapshot.docs.map((doc2) => ({\\n      id: doc2.id,\\n      description: doc2.data().description || \\"\\",\\n      name: doc2.data().name || \\"\\",\\n      thumbnail: doc2.data().thumbnail || \\"\\",\\n      youtubeId: doc2.data().youtubeId || \\"\\",\\n      position: typeof doc2.data().position === \\"number\\" ? doc2.data().position : 0,\\n      showLogo: typeof doc2.data().showLogo === \\"boolean\\" ? doc2.data().showLogo : false,\\n      logoType: doc2.data().logoType || \\"\\",\\n      // Ensure that logoType can be an empty string, not undefined\\n      clickCount: typeof doc2.data().clickCount === \\"number\\" ? doc2.data().clickCount : 0,\\n      clicks: Array.isArray(doc2.data().clicks) ? doc2.data().clicks : []\\n    }));\\n    videos.sort((a, b) => a.position - b.position);\\n  } catch (error) {\\n    console.error(\\"Error fetching videos: \\", error);\\n  }\\n};\\nfetchVideos();\\nconst openVideo = async (video) => {\\n  await recordVideoClick(video.id);\\n  selectedVideo = video;\\n};\\nconst closeVideo = () => {\\n  selectedVideo = null;\\n};\\nasync function recordVideoClick(videoId) {\\n  try {\\n    const userId = localStorage.getItem(\\"userId\\") || \\"anonymous\\";\\n    const clickTimestamp = /* @__PURE__ */ new Date();\\n    const videoRef = doc(db, \\"videos\\", videoId);\\n    await setDoc(videoRef, {\\n      clickCount: increment(1),\\n      clicks: arrayUnion({ userId, timestamp: clickTimestamp })\\n    }, { merge: true });\\n    console.log(\`Recorded click for Video ID: \${videoId} by User ID: \${userId}\`);\\n  } catch (error) {\\n    console.error(\\"Error recording video click: \\", error);\\n  }\\n}\\nfunction getEmbedUrl(videoId) {\\n  return \`https://www.youtube.com/embed/\${videoId}\`;\\n}\\nfunction handleImageLoad(event) {\\n  const img = event.target;\\n  img.style.opacity = \\"1\\";\\n}\\nfunction getLogoPath(logoType) {\\n  return logoType && logoMap[logoType] ? logoMap[logoType] : \\"\\";\\n}\\n<\/script>\\r\\n\\r\\n{#if selectedVideo}\\r\\n  <VideoViewer {selectedVideo} on:close={closeVideo} />\\r\\n{/if}\\r\\n\\r\\n<div class=\\"video-grid\\">\\r\\n  {#each videos as video}\\r\\n    <button class=\\"video-item\\" on:click={() => openVideo(video)} aria-label={\`Open \${video.name}\`}>\\r\\n      <div class=\\"thumbnail-wrapper\\">\\r\\n        <img src={video.thumbnail} alt={video.name} class=\\"thumbnail\\" loading=\\"lazy\\" on:load={handleImageLoad} style=\\"opacity: 0; transition: opacity 3s ease;\\" />\\r\\n        {#if video.showLogo && video.logoType}\\r\\n          <img \\r\\n            src={getLogoPath(video.logoType)} \\r\\n            alt={video.logoType === 'Da' ? 'DA SYNCRO logo' : 'Yoann logo'} \\r\\n            class=\\"logo {video.logoType !== 'Da' ? 'small-logo' : ''}\\" />\\r\\n        {/if}\\r\\n      </div>\\r\\n      <div class=\\"overlay\\">\\r\\n        <p class=\\"description\\">{video.description}</p>\\r\\n      </div>\\r\\n    </button>\\r\\n  {/each}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  @import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;700&display=swap');\\r\\n\\r\\n  .video-grid {\\r\\n  display: grid;\\r\\n  grid-template-columns: repeat(3, 1fr); /* 3 columns */\\r\\n  gap: 5px; /* Equal 2px gap between columns and rows */\\r\\n  justify-content: center; /* Horizontally centers the grid */\\r\\n  align-content: center; /* Vertically centers the grid */\\r\\n  width: 99vw;\\r\\n  padding: 0px;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n  .video-item {\\r\\n    position: relative;\\r\\n    cursor: pointer;\\r\\n    overflow: hidden;\\r\\n    border: none;\\r\\n    background: none;\\r\\n    aspect-ratio: 2.39 / 1;\\r\\n    width: 100%;\\r\\n    transition: transform 0.5s ease; /* Smooth growth effect */\\r\\n  }\\r\\n\\r\\n  .thumbnail-wrapper {\\r\\n    position: relative;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .thumbnail {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    max-height: 100%;\\r\\n    -o-object-fit: cover;\\r\\n       object-fit: cover;\\r\\n    transition: opacity 0.3s ease;\\r\\n    opacity: 1;\\r\\n  }\\r\\n\\r\\n  .logo {\\r\\n    position: absolute;\\r\\n    top: 10px;\\r\\n    left: 10px;\\r\\n    width: 100px;\\r\\n    height: auto;\\r\\n    z-index: 1;\\r\\n    opacity: 0;\\r\\n    transition: opacity 0.5s ease;\\r\\n  }\\r\\n\\r\\n  .small-logo {\\r\\n    transform: scale(0.7);\\r\\n    position: absolute;\\r\\n    top: -0%;\\r\\n    left: -0%;\\r\\n    z-index: 1;\\r\\n    opacity: 0;\\r\\n    transition: opacity 0.5s ease, transform 0.5s ease;\\r\\n  }\\r\\n\\r\\n  .overlay {\\r\\n    position: absolute;\\r\\n    top: 50%;\\r\\n    left: 50%;\\r\\n    transform: translate(-50%, -50%);\\r\\n    color: white;\\r\\n    text-align: center;\\r\\n    display: none;\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  .video-item:hover {\\r\\n    display: block;\\r\\n    transform: scale(1.01); /* Slightly increases size by 2% */\\r\\n  }\\r\\n\\r\\n  .video-item:hover .overlay {\\r\\n    display: block;\\r\\n    \\r\\n  }\\r\\n\\r\\n  .video-item:hover .logo {\\r\\n    opacity: 1;\\r\\n  }\\r\\n\\r\\n  .video-item:hover .thumbnail {\\r\\n    opacity: 0.4;\\r\\n    filter: blur(2px);\\r\\n  }\\r\\n\\r\\n  .description {\\r\\n    white-space: pre-line;\\r\\n    font-size: 1rem;\\r\\n    font-family: 'Roboto Slab', serif;\\r\\n    color: white;\\r\\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\\r\\n  }\\r\\n\\r\\n  @media (max-width: 1200px) {\\r\\n    .video-grid {\\r\\n      grid-template-columns: repeat(2, 1fr);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @media (max-width: 800px) {\\r\\n    .video-grid {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n  }\\r\\n</style>"],"names":[],"mappings":"AAwFE,QAAQ,qFAAqF,CAE7F,yCAAY,CACZ,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,GAAG,CAAE,GAAG,CACR,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,MAAM,CACrB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,UACd,CAEE,yCAAY,CACV,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CACtB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,SAAS,CAAC,IAAI,CAAC,IAC7B,CAEA,gDAAmB,CACjB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MACf,CAEA,wCAAW,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,KAAK,CACjB,UAAU,CAAE,KAAK,CACpB,UAAU,CAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAC7B,OAAO,CAAE,CACX,CAEA,mCAAM,CACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,IAAI,CAAC,IAC3B,CAEA,yCAAY,CACV,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAChD,CAEA,sCAAS,CACP,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IACT,CAEA,yCAAW,MAAO,CAChB,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,MAAM,IAAI,CACvB,CAEA,0BAAW,MAAM,CAAC,uBAAS,CACzB,OAAO,CAAE,KAEX,CAEA,0BAAW,MAAM,CAAC,oBAAM,CACtB,OAAO,CAAE,CACX,CAEA,0BAAW,MAAM,CAAC,yBAAW,CAC3B,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,KAAK,GAAG,CAClB,CAEA,0CAAa,CACX,WAAW,CAAE,QAAQ,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,aAAa,CAAC,CAAC,KAAK,CACjC,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAC5C,CAEA,MAAO,YAAY,MAAM,CAAE,CACzB,yCAAY,CACV,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CACtC,CACF,CAEA,MAAO,YAAY,KAAK,CAAE,CACxB,yCAAY,CACV,qBAAqB,CAAE,GACzB,CACF"}`
};
const VideoGrid = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let videos = [];
  const logoMap = {
    Da: "/image/Da.webp",
    Yoann: "/image/logo.webp"
  };
  const fetchVideos = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, "videos"));
      videos = querySnapshot.docs.map((doc2) => ({
        id: doc2.id,
        description: doc2.data().description || "",
        name: doc2.data().name || "",
        thumbnail: doc2.data().thumbnail || "",
        youtubeId: doc2.data().youtubeId || "",
        position: typeof doc2.data().position === "number" ? doc2.data().position : 0,
        showLogo: typeof doc2.data().showLogo === "boolean" ? doc2.data().showLogo : false,
        logoType: doc2.data().logoType || "",
        // Ensure that logoType can be an empty string, not undefined
        clickCount: typeof doc2.data().clickCount === "number" ? doc2.data().clickCount : 0,
        clicks: Array.isArray(doc2.data().clicks) ? doc2.data().clicks : []
      }));
      videos.sort((a, b) => a.position - b.position);
    } catch (error) {
      console.error("Error fetching videos: ", error);
    }
  };
  fetchVideos();
  function getLogoPath(logoType) {
    return logoType && logoMap[logoType] ? logoMap[logoType] : "";
  }
  $$result.css.add(css);
  return `${``} <div class="video-grid svelte-1fwfsz4">${each(videos, (video) => {
    return `<button class="video-item svelte-1fwfsz4"${add_attribute("aria-label", `Open ${video.name}`, 0)}><div class="thumbnail-wrapper svelte-1fwfsz4"><img${add_attribute("src", video.thumbnail, 0)}${add_attribute("alt", video.name, 0)} class="thumbnail svelte-1fwfsz4" loading="lazy" style="opacity: 0; transition: opacity 3s ease;"> ${video.showLogo && video.logoType ? `<img${add_attribute("src", getLogoPath(video.logoType), 0)}${add_attribute(
      "alt",
      video.logoType === "Da" ? "DA SYNCRO logo" : "Yoann logo",
      0
    )} class="${"logo " + escape(video.logoType !== "Da" ? "small-logo" : "", true) + " svelte-1fwfsz4"}">` : ``}</div> <div class="overlay svelte-1fwfsz4"><p class="description svelte-1fwfsz4">${escape(video.description)}</p></div> </button>`;
  })} </div>`;
});
export {
  VideoGrid as default
};
